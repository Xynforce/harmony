import java.io.*;
import java.net.*;
import java.util.ArrayList;

class ChatServer {

    ArrayList<ChatClient> clients = new ArrayList<>();
    ServerSocket serverSock;// server socket for connection
    static Boolean running = true;  // controls if the server is accepting clients
    public static void main(String[] args) {
        new ChatServer().go(); //start the server
    }

    public void go() {
        System.out.println("Waiting for a client connection..");
        Socket client = null;//hold the client connection
        try {
            serverSock = new ServerSocket(5555);  //assigns an port to the server
            //serverSock.setSoTimeout(50000);  //100 second timeout
            while(running) {  //this loops to accept multiple clients
                client = serverSock.accept();  //wait for connection
                System.out.println("Client connected");

                Thread t = new Thread(new ConnectionHandler(client));//create a thread for the new client and pass in the socket
                t.start(); //start the new thread
            }
        }catch(Exception e) {
            System.out.println("Error accepting connection");
            //close all and quit
            try {
                client.close();
            }catch (Exception e1) {
                System.out.println("Failed to close socket");
            }
            System.exit(-1);
        }
    }
    private void buildClientList(String username, int status, String ipAddress){
        ChatClient client = new ChatClient(username,status,ipAddress);
        if(!clients.contains(client)) {
            clients.add(client);
        }
    }


    //***** Inner class - thread for client connection
    class ConnectionHandler implements Runnable {
        private PrintWriter output;
        private BufferedReader input;
        private Socket client;
        private boolean running;
        private String clientInput;
        private OutputStream outstream;
        private byte[] serverOutput;

        /* ConnectionHandler
         * Constructor
         * @param the socket belonging to this client connection
         */
        ConnectionHandler(Socket s) {

            this.client = s;  //constructor assigns client to this
            try {  //assign all connections to client
                //System.out.println(client.getInetAddress());

                this.output = new PrintWriter(client.getOutputStream());
                InputStreamReader Instream = new InputStreamReader(client.getInputStream());
                this.input = new BufferedReader(Instream);

            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("test: " + e.getMessage());
            }
            running = true;
        } //end of constructor

        /* run
         * executed on start of thread
         */
        public void run() {
            String msg = "";
            String key;
            while (running) {
                try {
                    if (input.ready()) {
                        msg = input.readLine();
                        //this.output.write("test");
                        // System.out.println("test");

                        System.out.println("msg from client! " + msg);
                        //running=false;
                    }
                } catch (IOException e) {
                    System.out.println("Failed to receive msg from the client");
                    e.printStackTrace();
                }
            }

            //Send a message to the client
            output.println("");
            output.flush();

            //close the socket
            try {
                input.close();
                output.close();
                client.close();
            } catch (Exception e) {
                System.out.println("Failed to close socket");
            }
        }
    }


}
